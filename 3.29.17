#3.29.17

#THIS DOES NOT WORK I WAS JUST TRYING STUFF OUT

import math

locations="-1,-1,49.12061,21.63979,4.22097;1388,601140,33.63567,24.19006,0;1388,603106,46.39898,17.1108,0;1388,696289,46.01186,33.38741,0;1388,696290,60.34143,20.93464,0;1388,756880,44.92099,24.90649,0;1415,511656,48.24634,23.11736,0;1415,567438,49.13164,33.35987,0;1415,708860,49.59034,17.67181,0;1415,720555,59.97774,23.72847,0;1415,793930,67.94616,24.32075,0;-2,1,95.3923,16.66718,0;-2,2,62.62406,49.82708,0;-2,3,29.67981,1.82727,0"
ball = []
T1P1 = []
T1P2 = []
T1P3 = []
T1P4 = []
T1P5 = []
T2P1 = []
T2P2 = []
T2P3 = []
T2P4 = []
T2P5 = []
R1 = []
R2 = []
R3 = []
team1 = []
team2 = []
refs = []
bal = []
norefs = [ball, T1P1, T1P2, T1P3, T1P4, T1P5, T2P1, T2P2, T2P3, T2P4, T2P5]
times = []
timeslst = []
#for moment in root.iter("moment"):
    #locations = moment.get("locations")
places = locations.split(";")   #splits location data
if len(places) != 14: # if there arent 14 indexes in a place then it skips that moment 
   del moment
else: #runs code as usual 
    #time0 = moment.get("time")
    #timeslst.append(int(time0)) #organizes times into a list 
    bal.append(places[0])
    team1.append(places[1:6])
    team2.append(places[6:11]) 
    refs.append(places[11:14])

#takes list of points, isolates coordinates, and makes them floats
for item in bal:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    ball.append(thg[2:4])

#consolidates the team data so we don't have to go through 14 for statements
for item in team1:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            T1P1.append(thg[2:4])
        elif item.index(y) == 1:
            T1P2.append(thg[2:4])
        elif item.index(y) == 2:
            T1P3.append(thg[2:4])
        elif item.index(y) == 3:
            T1P4.append(thg[2:4])
        elif item.index(y) == 4:
            T1P5.append(thg[2:4])

for item in team2:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            T2P1.append(thg[2:4])
        elif item.index(y) == 1:
            T2P2.append(thg[2:4])
        elif item.index(y) == 2:
            T2P3.append(thg[2:4])
        elif item.index(y) == 3:
            T2P4.append(thg[2:4])
        elif item.index(y) == 4:
            T2P5.append(thg[2:4])
            
for item in refs:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            R1.append(thg[2:4])
        elif item.index(y) == 1:
            R2.append(thg[2:4])
        elif item.index(y) == 2:
            R3.append(thg[2:4])



dist = []
def distance(ball, player):
    return math.sqrt((ball[0] - T1P1[0])**2 + (ball[1] - T1P1[1])**2)
 
 
 # OKAY THIS THING WORKS BUT RIGHT NOW IT ONLY GIVE DISTANCE OF BALL AND 1 OBJECT
 import math

ball = [75,3]
T1P1 = [72,5]
T1P2 = [77,7]
T1P3 = [74,8]
T1P4 = [75,4]
T1P5 = [78,1]
T2P1 = [79,0]
T2P2 = [71,9]
T2P3 = [72,2]
T2P4 = [70,4]
T2P5 = [73,2]
dis = []

dist = []
def distance(ball, player):
    return math.sqrt((ball[0] - player[0])**2 + (ball[1] - player[1])**2)
print(distance(ball, T1P1)) 


#gives a list of the player closest to the ball
import math

ball = [[3,4], [4,5]]
P1 = [[5,6], [8,7]]
P2 = [[4,3], [3,5]]
P3 = [[6,8], [8,10]]

def distance(ball, player):
    return math.sqrt((ball[0] - player[0])**2 + (ball[1] - player[1])**2)

player = []

for balll,a,b,c in zip(ball,P1,P2,P3):
    dist = [distance(balll, a),distance(balll, b),distance(balll, c)]
    x = min(dist)
    if x == distance(balll, a):
        player.append(("P1",x))
    elif x == distance(balll, b):
        player.append(("P2",x))
    elif x == distance(balll, c):
        player.append(("P3",x))
print(player)

#this works 

def distance(ball, player):
    return math.sqrt((ball[0] - player[0])**2 + (ball[1] - player[1])**2)

player = []

for balll,AP1,AP2,AP3,AP4,AP5,BP1,BP2,BP3,BP4,BP5,t in zip(ball,T1P1,T1P2,T1P3,T1P4,T1P5,T2P1,T2P2,T2P3,T2P4,T2P5,timeslst):
    dist = [distance(balll, AP1),distance(balll, AP2),distance(balll, AP3),distance(balll, AP4),distance(balll, AP5),distance(balll, BP1),distance(balll, BP2),distance(balll, BP3),distance(balll, BP4),distance(balll, BP5)]
    x = min(dist)
    if x == distance(balll, AP1):
        player.append([1,"T1P1",x,t])
    elif x == distance(balll, AP2):
        player.append([1,"T1P2",x,t])
    elif x == distance(balll, AP3):
        player.append([1,"T1P3",x,t])
    elif x == distance(balll, AP4):
        player.append([1,"T1P4",x,t])
    elif x == distance(balll, AP5):
        player.append([1,"T1P5",x,t])
    elif x == distance(balll, BP1):
        player.append([2,"T2P1",x,t])
    elif x == distance(balll, BP2):
        player.append([2,"T2P2",x,t])
    elif x == distance(balll, BP3):
        player.append([2,"T2P3",x,t])
    elif x == distance(balll, BP4):
        player.append([2,"T2P4",x,t])
    elif x == distance(balll, BP5):
        player.append([2,"T2P5",x,t])
        

for x,y,z in zip(player,player[1:],player[30:]):
    if x[1] != y[1]:       #checks if there's a change in possession
        if y[1] == z[1]:   #checks if the second person has possession for more than 1.2 seconds 
            if x[0] == 1 and y[0] == 1:   #checks if the pass was made between teamates of the same team
                passesD += 1
                passes += 1
                print(x,y)
            elif x[0] == 2 and y[0] == 2:
                passesF += 1
                passes += 1
                print(x,y)


print(passes)
