#3.29.17
import math
import xml.etree.ElementTree as ET

tree = ET.parse("5MIN H1.XML")
root = tree.getroot()

#This defines the variables outside of the for loop so it prints anywhere
ball = []
T1P1 = []
T1P2 = []
T1P3 = []
T1P4 = []
T1P5 = []
T2P1 = []
T2P2 = []
T2P3 = []
T2P4 = []
T2P5 = []
R1 = []
R2 = []
R3 = []
team1 = []
team2 = []
refs = []
bal = []

times = []
timeslst = []
gameclock = []

for moment in root.iter("moment"):
    locations = moment.get("locations")
    places = locations.split(";")   #splits location data
    if len(places) != 14: # if there arent 14 indexes in a place then it skips that moment 
        del moment
    else: #runs code as usual 
        time = moment.get("time")
        timeslst.append(int(time)) #organizes times into a list 
        clock = moment.get("game-clock")
        gameclock.append(float(clock))
        bal.append(places[0])
        team1.append(places[1:6])
        team2.append(places[6:11]) 
        refs.append(places[11:14])

#takes list of points, isolates coordinates, and makes them floats
for item in bal:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    ball.append(thg[2:4])

#consolidates the team data so we don't have to go through 14 for statements
for item in team1:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            T1P1.append(thg[2:4])
        elif item.index(y) == 1:
            T1P2.append(thg[2:4])
        elif item.index(y) == 2:
            T1P3.append(thg[2:4])
        elif item.index(y) == 3:
            T1P4.append(thg[2:4])
        elif item.index(y) == 4:
            T1P5.append(thg[2:4])          

for item in team2:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            T2P1.append(thg[2:4])
        elif item.index(y) == 1:
            T2P2.append(thg[2:4])
        elif item.index(y) == 2:
            T2P3.append(thg[2:4])
        elif item.index(y) == 3:
            T2P4.append(thg[2:4])
        elif item.index(y) == 4:
            T2P5.append(thg[2:4])
            
for item in refs:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            R1.append(thg[2:4])
        elif item.index(y) == 1:
            R2.append(thg[2:4])
        elif item.index(y) == 2:
            R3.append(thg[2:4])
            
            

def distance(ball, player):
    return math.sqrt((ball[0] - player[0])**2 + (ball[1] - player[1])**2)

player = []
passes = 0
passesD = 0
passesF = 0

for balll,AP1,AP2,AP3,AP4,AP5,BP1,BP2,BP3,BP4,BP5,t,g in zip(ball,T1P1,T1P2,T1P3,T1P4,T1P5,T2P1,T2P2,T2P3,T2P4,T2P5,timeslst,gameclock):
    dist = [distance(balll, AP1),distance(balll, AP2),distance(balll, AP3),distance(balll, AP4),distance(balll, AP5),distance(balll, BP1),distance(balll, BP2),distance(balll, BP3),distance(balll, BP4),distance(balll, BP5)]
    x = min(dist)
    if x == distance(balll, AP1):
        player.append([1,"T1P1",x,t,g])
    elif x == distance(balll, AP2):
        player.append([1,"T1P2",x,t,g])
    elif x == distance(balll, AP3):
        player.append([1,"T1P3",x,t,g])
    elif x == distance(balll, AP4):
        player.append([1,"T1P4",x,t,g])
    elif x == distance(balll, AP5):
        player.append([1,"T1P5",x,t,g])
    elif x == distance(balll, BP1):
        player.append([2,"T2P1",x,t,g])
    elif x == distance(balll, BP2):
        player.append([2,"T2P2",x,t,g])
    elif x == distance(balll, BP3):
        player.append([2,"T2P3",x,t,g])
    elif x == distance(balll, BP4):
        player.append([2,"T2P4",x,t,g])
    elif x == distance(balll, BP5):
        player.append([2,"T2P5",x,t,g])
        

for x,y,z in zip(player,player[1:],player[25:]):
    if x[4] < 1200 and x[2] < 10:
        if x[1] != y[1]:
            if y[1] == z[1]:
                if x[0] == 1 and y[0] == 1:
                    passesD += 1
                    passes += 1
                    #print(x,y)
                elif x[0] == 2 and y[0] == 2:
                    passesF += 1
                    passes += 1
                    #print(x,y)

print(passes)
print("Duke = ", passesD)
print("Florida = ", passesF)
