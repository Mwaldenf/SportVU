#4.26.17

import xml.etree.ElementTree as ET
import math #imports math fuctions 

tree = ET.parse("1MIN H1.XML") #imports a specific XML file
root = tree.getroot()


#This defines the variables outside of the for loop so it prints anywhere
ball = []
T1P1 = [] #Team 1 Player 1
T1P2 = [] #Team 1 Player 2
T1P3 = [] #etc
T1P4 = []
T1P5 = []
T2P1 = []
T2P2 = []
T2P3 = []
T2P4 = []
T2P5 = []
R1 = [] #Referee 1
R2 = [] #Referee 2
R3 = [] #Referee 3
team1 = [] #all of team 1
team2 = [] #all of team 2
refs = [] #all the refs
bal = [] #intermediate ball variable

timeslst = [] #list of absolute time
gameclock = [] #game clock time

for moment in root.iter("moment"):
    locations = moment.get("locations")
    places = locations.split(";")   #splits location data
    if len(places) != 14: # if there arent 14 indexes in a place then it skips that moment 
        del moment
    else: #runs code as usual 
        time = moment.get("time")
        timeslst.append(int(time)) #organizes times into a list 
        clock = moment.get("game-clock")
        gameclock.append(float(clock))
        bal.append(places[0])
        team1.append(places[1:6])
        team2.append(places[6:11]) 
        refs.append(places[11:14])

#takes list of points, isolates coordinates, and makes them floats
for item in bal:
    coord = item.split(",") #splits
    thg = [float(x) for x in coord] #makes float
    ball.append(thg[2:5])

#consolidates the team data so we don't have to go through 14 for statements
for item in team1:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0: #for index 0 (player 1)...
            T1P1.append(thg[2:4]) #appends x and y coordinates
        elif item.index(y) == 1: #for index 1 (player 2)...
            T1P2.append(thg[2:4])
        elif item.index(y) == 2: #etc
            T1P3.append(thg[2:4])
        elif item.index(y) == 3:
            T1P4.append(thg[2:4])
        elif item.index(y) == 4:
            T1P5.append(thg[2:4])          

for item in team2: #same but for team 2
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            T2P1.append(thg[2:4])
        elif item.index(y) == 1:
            T2P2.append(thg[2:4])
        elif item.index(y) == 2:
            T2P3.append(thg[2:4])
        elif item.index(y) == 3:
            T2P4.append(thg[2:4])
        elif item.index(y) == 4:
            T2P5.append(thg[2:4])
            
for item in refs: #same but for referees
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            R1.append(thg[2:4])
        elif item.index(y) == 1:
            R2.append(thg[2:4])
        elif item.index(y) == 2:
            R3.append(thg[2:4])

#defining a possession and passes
#possession variables
pRight = 0 #count of possessions on the right side of the court
pLeft = 0 #count of possession on the left side of the court 
count = [[3,3]]
poschange = 0 #count of number of times the possesion changes 
possession = []

#passing variables
player = [] #idexes are as follows: team,player id, distance from ball, absolute time, gameclock, ball z coord, player x,y, ball x,y
passes = 0 #count for total passes
passesR = 0 #count for passes on the team with right court possesion 
passesL = 0 #count for passes on the team with left court possesion


#isolates time when all players were on one side of the court
for b,aa,ab,ac,ad,ae,ba,bb,bc,bd,be,t,g in zip(ball,T1P1,T1P2,T1P3,T1P4,T1P5,T2P1,T2P2,T2P3,T2P4,T2P5,timeslst,gameclock):
    if aa[0] and ab[0] >= 47 and ac[0] >= 47 and ad[0] >= 47 and ae[0] >= 47 and ba[0] >= 47 and bb[0] >= 47 and bc[0] >= 47 and bd[0] >= 47 and be[0] >= 47:
        count.append([1,t,g])
    elif aa[0] <= 47 and ab[0] <= 47 and ac[0] <= 47 and ad[0] <= 47 and ae[0] <= 47 and ba[0] <= 47 and bb[0] <= 47 and bc[0] <= 47 and bd[0] <= 47 and be[0] <= 47:
        count.append([0,t,g])

#puts total possesion number, whether it was Left or Right possession, what possession it was for L or R, and the start and end time
for a,b in zip(count,count[1:]):
    if a[0] != b[0]: #if there's a change in which team has a possession
        poschange += 1
        if b[0] == 1: #a 1 means the team in possession is on the right
            pRight += 1 
            possession.append([poschange,["R",1],pRight,[b[2]]])
        elif b[0] == 0: #0 means on the left
            pLeft += 1
            possession.append([poschange,["L",2],pLeft,[b[2]]])
        for x in possession:
            if x[0] == poschange-1:
                x[3].append(a[2])
    if count.index(a) == len(count)-2:
        x[3].append(b[2])

#passing
def distance(ball, player): #distance function from the ball to a player
    return math.sqrt((ball[0] - player[0])**2 + (ball[1] - player[1])**2)

for balll,AP1,AP2,AP3,AP4,AP5,BP1,BP2,BP3,BP4,BP5,t,g in zip(ball,T1P1,T1P2,T1P3,T1P4,T1P5,T2P1,T2P2,T2P3,T2P4,T2P5,timeslst,gameclock):
    if balll[0] >= 0 and balll[0] <= 94 and balll[1] >= 0 and balll[1] <= 50:
        dist = [distance(balll, AP1),distance(balll, AP2),distance(balll, AP3),distance(balll, AP4),distance(balll, AP5),distance(balll, BP1),distance(balll, BP2),distance(balll, BP3),distance(balll, BP4),distance(balll, BP5)]
        x = min(dist) #finds which player is closest to the ball
        if x == distance(balll, AP1):
            player.append([1,"T1P1",x,t,g,balll[2],AP1,balll]) #[(which team),(which player),(distance from ball),(absolute time),(game clock),(ball height),(player coordinates,(ball coordinates)]
        elif x == distance(balll, AP2):
            player.append([1,"T1P2",x,t,g,balll[2],AP2,balll]) #same as above
        elif x == distance(balll, AP3):
            player.append([1,"T1P3",x,t,g,balll[2],AP3,balll])
        elif x == distance(balll, AP4):
            player.append([1,"T1P4",x,t,g,balll[2],AP4,balll])
        elif x == distance(balll, AP5):
            player.append([1,"T1P5",x,t,g,balll[2],AP5,balll])
        elif x == distance(balll, BP1):
            player.append([2,"T2P1",x,t,g,balll[2],BP1,balll])
        elif x == distance(balll, BP2):
            player.append([2,"T2P2",x,t,g,balll[2],BP2,balll])
        elif x == distance(balll, BP3):
            player.append([2,"T2P3",x,t,g,balll[2],BP3,balll])
        elif x == distance(balll, BP4):
            player.append([2,"T2P4",x,t,g,balll[2],BP4,balll])
        elif x == distance(balll, BP5):
            player.append([2,"T2P5",x,t,g,balll[2],BP5,balll])

passperpos = [] #passes per possession
startpR = [] #stores the start coordinates of ball for a pass (for right)
endpR = [] #stores the end coordinates of ball for a pass (for right)
passdistR = [] #stores the distance traveled in a pass (for right)          
starttR = [] #start time of the pass (for right)
endtR = [] #end time of the pass (for right)
passtR = [] #total pass time of the pass (for right)
speedR = [] #speed of each pass (for right)
startpL = [] #stores the start coordinated of a pass (for left)
endpL = [] #stores the end coordinateds of a pass (for left)
passdistL = [] #stores the distance traveled in a pass (for left)           
starttL = [] #start time of pass (for left)
endtL = [] #end time of passes (for left)
passtL = [] #total time of pass (for left)
speedL = [] #speed of passes (for left)
sped = [] #intermediate variable, has the time period to look for the pass start and end in


#print(player)
for a in possession:
    pss = 0 #for possession characteristics, can add other things
    for x,y,z,w,v in zip(player,player[1:],player[18:],player[4:],player[5:]):
        if x[4] <= a[3][0] and x[4] >= a[3][1] and x[4] != y[4] != w[4] != v[4]: #takes coordinates from within a possession only from the team with possession when the clock is running
            if x[4] < 1200 and x[2] < 9.25 and x[5] < 8: #pints after game started, determines dist from player when possession changes, dtermines ball height
                if x[1] != y[1]: #simple pass, when no other player interferes with the pass
                    if y[1] == z[1] and x[0] == y[0]: #determines the players are on the same team and the second player holds the ball long enough
                        if x[0] == 1 and a[1][0] == 'R': #if player was on the right team...
                            passesR += 1 #increases pass count for right team
                            passes += 1 #increaes pass count for all passes
                            pss += 1
                            sped.append([x[4]+0.2,z[4],"R"]) #takes time from before change of closest player to find when pass started
                        elif x[0] == 2 and a[1][0] == 'L': #if player was on left team...
                            passesL += 1
                            passes += 1
                            pss += 1
                            sped.append([x[4]+0.2,z[4],"L"]) #as above
                elif w[1] != v[1] and w[0] != v[0] and x[1] != z[1] and x[0] == z[0]: #not a simple pass, another player interferes
                    if w[1] == x[1] == y[1] and x[2] <= 3 and z[2] <= 2.5: #if one player held possession of the ball before the "pass", distance to ball is less than 3 before pass, distance to ball after pass is less than 2.5
                        if x[0] == 1 and a[1][0] == 'R': #if pass is between right team players in their possession...
                            passesR += 1
                            passes += 1
                            pss += 1
                            sped.append([x[4],z[4],"R"]) #as above
                        elif x[0] == 2 and a[1][0] == 'L': #if left team...
                            passesL += 1
                            passes += 1
                            pss += 1
                            sped.append([x[4],z[4],"L"]) #as above
                    elif x[2] <= 1.5 and z[2] <= 2: #if distance before pass 1.5 and after 2...
                        if x[0] == 1 and a[1][0] == 'R': #same as above
                            passesR += 1
                            passes += 1
                            pss += 1
                            sped.append([x[4],z[4],"R"])
                        elif x[0] == 2 and a[1][0] == 'L':
                            passesL += 1
                            passes += 1
                            pss += 1
                            sped.append([x[4],z[4],"L"])
    passperpos.append([a[1],pss]) #has  number of passes in each possession

for x in sped: #finds when the ball reached a certain distance from the player
    startt = [] #start time of pass
    endt = [] #end time of pass
    startp = [] #start point of pass (ball)
    endp = [] #end point of pass (ball)
    for y,z,q in zip(player,player[1:],player[2:]): 
        if y[4] <= x[0] and y[4] >= x[1] and y[4] != z[4] != q[4]: #if y is in the window of the pass, and there isn't a game stopage...
            if y[2] < 2 and z[2] > 2 and q[2] > z[2]: #if the ball is going away from the player...
                startp.append(y[7]) #add the coordinate to startp
                startt.append(y[4])
            if y[2] > 2 and z[2] < 2 and q[2] < z[2]: #if the ball is going towards the player...
                endp.append(y[7])
                endt.append(y[4])
    if len(startt) == 0 or len(endt) == 0:
        if len(x) >= 9: #stops the repeat if no start or end time found
                del startt
                del endt
                del startp
                del endp
        if len(startt) == 0 and len(endt) == 0: #if both start and end have no found times, expand search time interval
            sped.append([x[0]+0.2,x[1]-0.2,x[2],"Take 2"])
        elif len(startt) == 0: #if the start time is empty, expand the start window
            sped.append([x[0]+0.2,x[1],x[2],"Take 2"])
        elif len(endt) == 0: #if the end time is empty, expand the end window
            sped.append([x[0],x[1]-0.2,x[2],"Take 2"])
    if len(startt) > 1 and len(endt) > 1: #if there are more than one start or end times...
        if len(startt) > 2 or len(endt) > 2: #if there are more than two start or end times...
            print("Passing is stupid, 3 or more start or end times were detected for one pass. Must check code") #I hope this never happens; most common occurance addressed; will be addressed more if enough time, if not only adressed if occurs
        elif len(endt) == 1: #if only two start time...
            if startt[1] < endt[0]: #if the second start time is after the end time delete that one
                del startt[1]
                del startp[1]
            else: #if both times are before the end time, delete the first start time
                del startt[0]
                del startp[0]
        elif len(startt) == 1: #if two end times...
            if endt[0] > startt[0]: #if the first end time is before the start time, delete that one
                del endt[0]
                del endp[0]
            else: #if both end times are after the start time, delete the second start time
                del endt[1]
                del endp[1]
                '''
        if startt[0] < endt[0]: #doesn't work, supposed to cut out negative speed
            print(startt)
            del startt
            del endt
            del startp
            del endp
            '''
    if len(startt) == 1 and len(endt) == 1: #if there is one start time and one end time, assign the data to whichever team the pass was
        if x[2] == "R":
            startpR.append(startp[0])
            endpR.append(endp[0])
            starttR.append(startt[0])
            endtR.append(endt[0])
        elif x[2] == "L":
            startpL.append(startp[0])
            endpL.append(endp[0])
            starttL.append(startt[0])
            endtL.append(endt[0])

if len(startt) != len(endt):
    print("Error: Speed lists not equal length") #if a start or end point isn't included it'll tell us before the speed gets messed up

def distancese(startp,endp): #distance formula in code
    return math.sqrt((endp[0] - startp[0])**2 + (endp[1] - startp[1])**2) 

for s,e in zip(startpR,endpR): #zips the start and end coordianates together
    passdistR.append(distancese(s,e)) #appends the distance of a pass to passdistR

for s,e in zip(startpL,endpL): #zips the start and end coordianates together
    passdistL.append(distancese(s,e)) #appends the distance of a pass to passdistL

def passtime(startt,endt): #time the pass takes
    return (startt - endt) 

for s,e in zip(starttR, endtR): #applies speed function
    passtR.append(passtime(s,e))

for s,e in zip(starttL, endtL): 
    passtL.append(passtime(s,e))

def speedpass(passdist,passt):
    return ((passdist / passt) * (3600/5280)) #finds the speed (r=d/t) and converts ft/sec to mi/hr

for d,t in zip(passdistR,passtR): #applies function
    speedR.append(speedpass(d,t))

for d,t in zip(passdistL,passtL):
    speedL.append(speedpass(d,t))

v = 0
for x in speedR:
    if x < 0: #if speed negative, deletes speed
        del speedR[v] 
    v += 1

q  = 0
for x in speedL:
    if x < 0: #if speed negative, deletes speed
        del speedL[q]
    q += 1

print(speedR) #in miles per hour, no other characteristics of the pass incuded
print(speedL)

print("Duke = ", passesR)
print("Florida = ", passesL)
print(passperpos)


#some updated animation stuff 

import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import matplotlib.patches as patches

tree = ET.parse("1MIN H1.XML")
root = tree.getroot()

#This defines the variables outside of the for loop so it prints anywhere
ball = []
T1P1 = []
T1P2 = []
T1P3 = []
T1P4 = []
T1P5 = []
T2P1 = []
T2P2 = []
T2P3 = []
T2P4 = []
T2P5 = []
R1 = []
R2 = []
R3 = []
team1 = []
team2 = []
refs = []
bal = []
norefs = [ball, T1P1, T1P2, T1P3, T1P4, T1P5, T2P1, T2P2, T2P3, T2P4, T2P5]
times = []
timeslst = []
for moment in root.iter("moment"):
    locations = moment.get("locations")
    places = locations.split(";")   #splits location data
    if len(places) != 14: # if there arent 14 indexes in a place then it skips that moment 
        del moment
    else: #runs code as usual 
        time0 = moment.get("time")
        timeslst.append(int(time0)) #organizes times into a list 
        bal.append(places[0])
        team1.append(places[1:6])
        team2.append(places[6:11]) 
        refs.append(places[11:14])

#takes list of points, isolates coordinates, and makes them floats
for item in bal:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    ball.append(thg[2:4])

#consolidates the team data so we don't have to go through 14 for statements
for item in team1:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            T1P1.append(thg[2:4])
        elif item.index(y) == 1:
            T1P2.append(thg[2:4])
        elif item.index(y) == 2:
            T1P3.append(thg[2:4])
        elif item.index(y) == 3:
            T1P4.append(thg[2:4])
        elif item.index(y) == 4:
            T1P5.append(thg[2:4])

for item in team2:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            T2P1.append(thg[2:4])
        elif item.index(y) == 1:
            T2P2.append(thg[2:4])
        elif item.index(y) == 2:
            T2P3.append(thg[2:4])
        elif item.index(y) == 3:
            T2P4.append(thg[2:4])
        elif item.index(y) == 4:
            T2P5.append(thg[2:4])
            
for item in refs:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            R1.append(thg[2:4])
        elif item.index(y) == 1:
            R2.append(thg[2:4])
        elif item.index(y) == 2:
            R3.append(thg[2:4])



#ball animation
plt.axes()

fig = plt.figure()
plt.xlim(-5,100)   #sets the axes so you can see the court
plt.ylim(-5,60)
line, = plt.plot([],[], color = '#FFD700', marker = 'o', markersize = 7)
line1, = plt.plot([],[], color = '#0000CD', marker = 'v', markersize = 10)
line2, = plt.plot([],[], color = '#0000CD', marker = 'v', markersize = 10)
line3, = plt.plot([],[], color = '#0000CD', marker = 'v', markersize = 10)
line4, = plt.plot([],[], color = '#0000CD', marker = 'v', markersize = 10)
line5, = plt.plot([],[], color = '#0000CD', marker = 'v', markersize = 10)
line6, = plt.plot([],[], color = '#B22222', marker = '^', markersize = 10)
line7, = plt.plot([],[], color = '#B22222', marker = '^', markersize = 10)
line8, = plt.plot([],[], color = '#B22222', marker = '^', markersize = 10)
line9, = plt.plot([],[], color = '#B22222', marker = '^', markersize = 10)
line10, = plt.plot([],[], color = '#B22222', marker = '^', markersize = 10)
#line11, = plt.plot([],[], color = 'k', marker = '*')
#line12, = plt.plot([],[], color = 'k', marker = '*')
#line13, = plt.plot([],[], color = 'k', marker = '*')
rectangle = plt.Rectangle((0, 0), 94, 50, fill = False, 
                          linestyle = '-') #draws the court in the correct dimensions
rectangle1 = plt.Rectangle((0, 17), 19, 16, fill = False, 
                          linestyle = '-') #free throw box
rectangle2 = plt.Rectangle((75, 17), 19, 16, fill = False, 
                          linestyle = '-') #free throw box
circle = plt.Circle((47,25), radius = 6.0 , fill = False, linestyle = '-') #middle circle
circle1 = plt.Circle((19,25), radius = 6.0 , fill = False, linestyle = '-') #key
circle2 = plt.Circle((75,25), radius = 6.0 , fill = False, linestyle = '-') #key
arc = patches.Arc([14,24.9], 23.75, 44, angle=0.0, theta1=270.0, theta2=90.0)
arc1 = patches.Arc([80,24.9], 23.75, 44, angle=0.0, theta1=90.0, theta2=270.0)
plt.gca().add_patch(rectangle) # gca = get current axis 
plt.gca().add_patch(rectangle1)
plt.gca().add_patch(rectangle2)
plt.gca().add_patch(circle)
plt.gca().add_patch(circle1)
plt.gca().add_patch(circle2)
plt.gca().add_patch(arc)
plt.gca().add_patch(arc1)
plt.plot([47,47], [0,50], color='k', linestyle='-', linewidth=1) #draws a halfcourt line 
plt.plot([0,19], [19,19], color='k', linestyle='-', linewidth=1) #draws part of key 
plt.plot([0,19], [31,31], color='k', linestyle='-', linewidth=1) #draws part of key 
plt.plot([75,94], [19,19], color='k', linestyle='-', linewidth=1) #draws part of key 
plt.plot([75,94], [31,31], color='k', linestyle='-', linewidth=1) #draws part of key 
plt.plot([4,4], [22,28], color = 'k', linestyle='-', linewidth=1)
plt.plot([90,90], [22,28], color = 'k', linestyle='-', linewidth=1)
#finishes 3-point line
plt.plot([0,14], [3,3], color='k', linestyle='-', linewidth=1) 
plt.plot([0,14], [47,47], color='k', linestyle='-', linewidth=1)
plt.plot([80,94], [3,3], color='k', linestyle='-', linewidth=1) #back board
plt.plot([80,94], [47,47], color='k', linestyle='-', linewidth=1)#back board
circle3 = plt.Circle((5.25,25), radius = 0.75 , fill = False, linestyle = '-') #add hoops
circle4 = plt.Circle((88.75,25), radius = 0.75, fill = False, linestyle = '-')#add hoops
plt.gca().add_patch(circle3)
plt.gca().add_patch(circle4)

#these animate each moving object
def ball_data():
    for frame in ball:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate(ball_data):                           
    x, y = ball_data[0], ball_data[1]        
    line.set_data(x,y)

def T1P1_data():
    for frame in T1P1:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate1(T1P1_data):                           
    x, y = T1P1_data[0], T1P1_data[1]        
    line1.set_data(x,y)

def T1P2_data():
    for frame in T1P2:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate2(T1P2_data): 
    x, y = T1P2_data[0], T1P2_data[1]
    line2.set_data(x,y)
    
def T1P3_data():
    for frame in T1P3:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate3(T1P3_data): 
    x, y = T1P3_data[0], T1P3_data[1]
    line3.set_data(x,y)
    
def T1P4_data():
    for frame in T1P4:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate4(T1P4_data): 
    x, y = T1P4_data[0], T1P4_data[1]
    line4.set_data(x,y)
    
def T1P5_data():
    for frame in T1P5:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate5(T1P5_data): 
    x, y = T1P5_data[0], T1P5_data[1]
    line5.set_data(x,y)

def T2P1_data():
    for frame in T2P1:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate6(T2P1_data):                           
    x, y = T2P1_data[0], T2P1_data[1]        
    line6.set_data(x,y)
            
def T2P2_data():
    for frame in T2P2:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate7(T2P2_data): 
    x, y = T2P2_data[0], T2P2_data[1]
    line7.set_data(x,y)
    
def T2P3_data():
    for frame in T2P3:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate8(T2P3_data): 
    x, y = T2P3_data[0], T2P3_data[1]
    line8.set_data(x,y)
    
def T2P4_data():
    for frame in T2P4:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate9(T2P4_data): 
    x, y = T2P4_data[0], T2P4_data[1]
    line9.set_data(x,y)
    
def T2P5_data():
    for frame in T2P5:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate10(T2P5_data): 
    x, y = T2P5_data[0], T2P5_data[1]
    line10.set_data(x,y)
    
"""def R1_data():
    for frame in R1:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate11(R1_data): 
    x, y = R1_data[0], R1_data[1]
    line11.set_data(x,y)
    
def R2_data():
    for frame in R2:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate12(R2_data): 
    x, y = R2_data[0], R2_data[1]
    line12.set_data(x,y)
    
def R3_data():
    for frame in R3:
        x = frame[0]
        y = frame[1]
        yield x, y
def animate13(R3_data): 
    x, y = R3_data[0], R3_data[1]
    line13.set_data(x,y)"""
    
anim = animation.FuncAnimation(fig, animate, ball_data, interval = 25, repeat = True)
anim1 = animation.FuncAnimation(fig, animate1, T1P1_data, interval = 25, repeat = True)
anim2 = animation.FuncAnimation(fig, animate2, T1P2_data, interval = 25, repeat = True)
anim3 = animation.FuncAnimation(fig, animate3, T1P3_data, interval = 25, repeat = True)
anim4 = animation.FuncAnimation(fig, animate4, T1P4_data, interval = 25, repeat = True)
anim5 = animation.FuncAnimation(fig, animate5, T1P5_data, interval = 25, repeat = True)
anim6 = animation.FuncAnimation(fig, animate6, T2P1_data, interval = 25, repeat = True)
anim7 = animation.FuncAnimation(fig, animate7, T2P2_data, interval = 25, repeat = True)
anim8 = animation.FuncAnimation(fig, animate8, T2P3_data, interval = 25, repeat = True)
anim9 = animation.FuncAnimation(fig, animate9, T2P4_data, interval = 25, repeat = True)
anim10 = animation.FuncAnimation(fig, animate10, T2P5_data, interval = 25, repeat = True)
#anim11 = animation.FuncAnimation(fig, animate11, R1_data, interval = 25, repeat = True)
#anim12 = animation.FuncAnimation(fig, animate12, R2_data, interval = 25, repeat = True)
#anim13 = animation.FuncAnimation(fig, animate13, R3_data, interval = 25, repeat = True)

plt.show()
