'''
This is just a test to make everything floats while maintaining structure
LINES 6-25 ARE NOT RELEVANT TO THE ACTUAL PROJECT ANYMORE
'''
'''
string = "4,3,5.6;4,7.3,4"

loc1 = string.split(";")
loc2 = []
loc3 = []
loc4 = []
loc5 = []
y = []
for number in loc1:
    loc2 = number.split(',')
    loc3.append(loc2)
for lst in loc3:
    for x in lst:
        y.append(float(x))
        print(x)
        #y = float(x)
        loc4.append(y)
    #loc3.remove(lst)
print(loc4)
'''
import xml.etree.ElementTree as ET

tree = ET.parse("5MIN H1.XML")
root = tree.getroot()


#This defines the variables outside of the for loop so it prints anywhere
ball = []
T1P1 = []
T1P2 = []
T1P3 = []
T1P4 = []
T1P5 = []
T2P1 = []
T2P2 = []
T2P3 = []
T2P4 = []
T2P5 = []
R1 = []
R2 = []
R3 = []
team1 = []
team2 = []
refs = []
bal = []

times = []
timeslst = []

for moment in root.iter("moment"):
    locations = moment.get("locations")
    places = locations.split(";")   #splits location data
    if len(places) != 14: # if there arent 14 indexes in a place then it skips that moment 
        del moment
    else: #runs code as usual 
        time = moment.get("time")
        timeslst.append(int(time)) #organizes times into a list 
        #imput numbers for different variable needs
        #may be moved later
        bal.append(places[0])
        #removed because of later code
        '''
        T1P1.append(places[1])
        T1P2.append(places[2])
        T1P3.append(places[3])
        T1P4.append(places[4])
        T1P5.append(places[5])
        T2P1.append(places[6])
        T2P2.append(places[7])
        T2P3.append(places[8])
        T2P4.append(places[9])
        T2P5.append(places[10])
        R1.append(places[11])
        R2.append(places[12])
        R3.append(places[13])   #no longer throws error bc of if statement 
        '''
        team1.append(places[1:6])
        team2.append(places[6:11]) 
        refs.append(places[11:14])

#takes list of points, isolates coordinates, and makes them floats
for item in bal:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    ball.append(thg[2:4])

#consolidates the team data so we don't have to go through 14 for statements
for item in team1:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            T1P1.append(thg[2:4])
        elif item.index(y) == 1:
            T1P2.append(thg[2:4])
        elif item.index(y) == 2:
            T1P3.append(thg[2:4])
        elif item.index(y) == 3:
            T1P4.append(thg[2:4])
        elif item.index(y) == 4:
            T1P5.append(thg[2:4])

for item in team2:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            T2P1.append(thg[2:4])
        elif item.index(y) == 1:
            T2P2.append(thg[2:4])
        elif item.index(y) == 2:
            T2P3.append(thg[2:4])
        elif item.index(y) == 3:
            T2P4.append(thg[2:4])
        elif item.index(y) == 4:
            T2P5.append(thg[2:4])
            
for item in refs:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            R1.append(thg[2:4])
        elif item.index(y) == 1:
            R2.append(thg[2:4])
        elif item.index(y) == 2:
            R3.append(thg[2:4])


#alternative if the above doesn't work
'''
bal = []        
for item in ball: #organizes ball coordinates into list 
    coord = item.split(",")
    thg = [float(x) for x in coord]
    bal.append(thg[2:4]) #looks at only coordinates (x,y) z will be done later 
#Here we are trying to split the x and y coordinates so that they are organized by team and player.
#I tried here to first organize by player and then define the team by the players.
#Maya organized using the team and then the players and that seems to be the better approach
    
bal = []
team1 = [T1P1, T1P2, T1P3, T1P4, T1P5]
team2 = [T2P1, T2P2, T2P3, T2P4, T2P5]
#for item in ball:
for item in T1P1:
   coord = item.split(",")
   thg = [float(x) for x in coord]
   T1P1.append(thg[2:4])
#print(bal)
for item in T1P2:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    T1P2.append(thg[2:4])
    
for item in T1P3:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    T1P3.append(thg[2:4])
    
for item in T1P4:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    T1P4.append(thg[2:4])
    
for item in T1P5:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    T1P5.append(thg[2:4])

for item in T2P1:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    T2P1.append(thg[2:4])
    
for item in T2P2:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    T2P2.append(thg[2:4])
    
for item in T2P3:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    T2P3.append(thg[2:4])
    
for item in T2P4:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    T2P4.append(thg[2:4])
    
for item in T2P5:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    T2P5.append(thg[2:4])
    
    team1.append(T1P , T2P5)
    #This doesn't really work but its the beginning of something that could in case our 
    #method ends up not working but really this is mild trash we will keep as a backup plan
print(team1)
#print(team2)
'''

import matplotlib.pyplot as plt

for item in ball:  
    plt.plot(item[0],item[1], "o") #prints a scatterplot of all the ball coordinates!!!!!!!
