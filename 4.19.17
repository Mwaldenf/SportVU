#4.19.17

import xml.etree.ElementTree as ET
import math
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.patches as mpatches

tree = ET.parse("5MIN H1.XML")
root = tree.getroot()


#This defines the variables outside of the for loop so it prints anywhere
ball = []
T1P1 = []
T1P2 = []
T1P3 = []
T1P4 = []
T1P5 = []
T2P1 = []
T2P2 = []
T2P3 = []
T2P4 = []
T2P5 = []
R1 = []
R2 = []
R3 = []
team1 = []
team2 = []
refs = []
bal = []

times = []
timeslst = []
gameclock = []

for moment in root.iter("moment"):
    locations = moment.get("locations")
    places = locations.split(";")   #splits location data
    if len(places) != 14: # if there arent 14 indexes in a place then it skips that moment 
        del moment
    else: #runs code as usual 
        time = moment.get("time")
        timeslst.append(int(time)) #organizes times into a list 
        clock = moment.get("game-clock")
        gameclock.append(float(clock))
        bal.append(places[0])
        team1.append(places[1:6])
        team2.append(places[6:11]) 
        refs.append(places[11:14])
#takes list of points, isolates coordinates, and makes them floats
for item in bal:
    coord = item.split(",")
    thg = [float(x) for x in coord]
    ball.append(thg[2:5])

#consolidates the team data so we don't have to go through 14 for statements
for item in team1:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            T1P1.append(thg[2:4])
        elif item.index(y) == 1:
            T1P2.append(thg[2:4])
        elif item.index(y) == 2:
            T1P3.append(thg[2:4])
        elif item.index(y) == 3:
            T1P4.append(thg[2:4])
        elif item.index(y) == 4:
            T1P5.append(thg[2:4])          

for item in team2:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            T2P1.append(thg[2:4])
        elif item.index(y) == 1:
            T2P2.append(thg[2:4])
        elif item.index(y) == 2:
            T2P3.append(thg[2:4])
        elif item.index(y) == 3:
            T2P4.append(thg[2:4])
        elif item.index(y) == 4:
            T2P5.append(thg[2:4])
            
for item in refs:
    for y in item:
        coord = y.split(",")
        thg = [float(x) for x in coord]
        if item.index(y) == 0:
            R1.append(thg[2:4])
        elif item.index(y) == 1:
            R2.append(thg[2:4])
        elif item.index(y) == 2:
            R3.append(thg[2:4])

#defining a possession and passes
#possession variables
pRight = 0
pLeft = 0
count = [[3,3]]
poschange = 0
possession = []

#passing variables
player = []
passes = 0
passesR = 0
passesL = 0


#isolates time when all players were on one side of the court
for b,aa,ab,ac,ad,ae,ba,bb,bc,bd,be,t,g in zip(ball,T1P1,T1P2,T1P3,T1P4,T1P5,T2P1,T2P2,T2P3,T2P4,T2P5,timeslst,gameclock):
    if aa[0] and ab[0] >= 47 and ac[0] >= 47 and ad[0] >= 47 and ae[0] >= 47 and ba[0] >= 47 and bb[0] >= 47 and bc[0] >= 47 and bd[0] >= 47 and be[0] >= 47:
        count.append([1,t,g])
    elif aa[0] <= 47 and ab[0] <= 47 and ac[0] <= 47 and ad[0] <= 47 and ae[0] <= 47 and ba[0] <= 47 and bb[0] <= 47 and bc[0] <= 47 and bd[0] <= 47 and be[0] <= 47:
        count.append([0,t,g])

#puts total possesion number, whether it was Left or Right possession, what possession it was for L or R, and the start and end time
for a,b in zip(count,count[1:]):
    if a[0] != b[0]:
        poschange += 1
        if b[0] == 1:
            pRight += 1
            possession.append([poschange,["R",1],pRight,[b[2]]])
        elif b[0] == 0:
            pLeft += 1
            possession.append([poschange,["L",2],pLeft,[b[2]]])
        for x in possession:
            if x[0] == poschange-1:
                x[3].append(a[2])
    if count.index(a) == len(count)-2:
        x[3].append(b[2])

#passing
def distance(ball, player):
    return math.sqrt((ball[0] - player[0])**2 + (ball[1] - player[1])**2)

for balll,AP1,AP2,AP3,AP4,AP5,BP1,BP2,BP3,BP4,BP5,t,g in zip(ball,T1P1,T1P2,T1P3,T1P4,T1P5,T2P1,T2P2,T2P3,T2P4,T2P5,timeslst,gameclock):
    if balll[0] >= 0 and balll[0] <= 94 and balll[1] >= 0 and balll[1] <= 50:
        dist = [distance(balll, AP1),distance(balll, AP2),distance(balll, AP3),distance(balll, AP4),distance(balll, AP5),distance(balll, BP1),distance(balll, BP2),distance(balll, BP3),distance(balll, BP4),distance(balll, BP5)]
        x = min(dist)
        if x == distance(balll, AP1):
            player.append([1,"T1P1",x,t,g,balll[2],AP1])
        elif x == distance(balll, AP2):
            player.append([1,"T1P2",x,t,g,balll[2],AP2])
        elif x == distance(balll, AP3):
            player.append([1,"T1P3",x,t,g,balll[2],AP3])
        elif x == distance(balll, AP4):
            player.append([1,"T1P4",x,t,g,balll[2],AP4])
        elif x == distance(balll, AP5):
            player.append([1,"T1P5",x,t,g,balll[2],AP5])
        elif x == distance(balll, BP1):
            player.append([2,"T2P1",x,t,g,balll[2],BP1])
        elif x == distance(balll, BP2):
            player.append([2,"T2P2",x,t,g,balll[2],BP2])
        elif x == distance(balll, BP3):
            player.append([2,"T2P3",x,t,g,balll[2],BP3])
        elif x == distance(balll, BP4):
            player.append([2,"T2P4",x,t,g,balll[2],BP4])
        elif x == distance(balll, BP5):
            player.append([2,"T2P5",x,t,g,balll[2],BP5])
            
startp = [] #stores the start coordinated of a pass
endp = [] #stores the end coordinateds of a pass
passdist = [] #stores the distance traveled in a pass             
passperpos = []
startt = []
endt = []
passt = []
#when to put exlude passes if not within team with posssession
#exlude all other passes??
for a in possession:
    pss = 0 #for possession characteristics, can add other things
    pos = []
    for x,y,z,w,v in zip(player,player[1:],player[18:],player[4:],player[5:]):
        if x[4] <= a[3][0] and x[4] >= a[3][1]: #takes coordinates from within a possession only from the team with possession
            if x[4] < 1200 and x[2] < 10 and x[5] < 11: #pints after game started, determines dist from player when possession changes, dtermines ball height
                if x[1] != y[1]:
                    if y[1] == z[1] and x[0] == y[0]:
                        if x[0] == 1 and a[1][0] == 'R':
                            passesR += 1
                            passes += 1
                            pss += 1
                            #print(x,y)
                            startp.append(x[6]) #appends start coordinates to startp
                            endp.append(y[6]) #appends end coordinates to endp
                            startt.append(x[4])
                            endt.append(y[4])
                        elif x[0] == 2 and a[1][0] == 'L':
                            passesL += 1
                            passes += 1
                            pss += 1
                            #print(x,y)    
                            startp.append(x[6]) #appends start coordinates to startp
                            endp.append(y[6]) #appends end coordinates to endp
                            startt.append(x[4])
                            endt.append(y[4])
                elif w[1] != v[1] and w[0] != v[0]:
                    if x[2] <= 1.5 and z[2] <= 2 and x[0] == z[0]:
                        if x[0] == 1 and a[1][0] == 'R':
                            passesR += 1
                            passes += 1
                            pss += 1
                            #print(x,y)
                            startp.append(x[6]) #appends start coordinates to startp
                            endp.append(y[6]) #appends end coordinates to endp
                            startt.append(x[4])
                            endt.append(y[4])
                        elif x[0] == 2 and a[1][0] == 'L':
                            passesL += 1
                            passes += 1
                            pss += 1
                            #print(x,y)
                            startp.append(x[6]) #appends start coordinates to startp
                            endp.append(y[6]) #appends end coordinates to endp
                            startt.append(x[4])
                            endt.append(y[4])
                    '''
                    elif x[0] == z[0] and w[1] == x[1] == y[1] and x[2] <= 3 and z[2] <= 2.5:
                        if x[0] == 1 and a[1][0] == 'R':
                            passesR += 1
                            passes += 1
                            pss += 1
                            print(x,y)
                        elif x[0] == 2 and a[1][0] == 'L':
                            passesL += 1
                            passes += 1
                            pss += 1
                            #print(x,y)
                            '''
    passperpos.append([a[1],pss]) #has  number of passes in each possession, chould check numbers
    
def distancese(startp,endp):
    return math.sqrt ((endp[0] - startp[0]) **2 + (endp[1] - startp[1]) **2)
    
for s,e in zip(startp,endp): #zips the start and end coordianates together
    passdist.append(distancese(s,e)) #appends the distance of a pass to passdist

def passtime(startt,endt):
    return (startt - endt) 

for s,e in zip (startt, endt): 
    passt.append(passtime(s,e))
    print(s-e)
    
#print(passt)

#print(startt)

#print (endt)

#graphing pilot plant
#second one commented out because the labels don't properly work

#haven't tried all at once, to get graphs we normally comment out all the other graph code
Dppp = [] #Duke passes per possession
FAppp = [] #Florida Atlantic passes per possession
numposD = [] #number of possessions for Duke
numposFA = [] #number of possessions for Florida Atlantic

for p in passperpos: #for each item in passperpos
    if p[0] == ['R', 1]: #if the item is for the right team append it to Dppp
        Dppp.append(p[1])
    elif p[0] == ['L', 2]: #same as above
        FAppp.append(p[1])
    
i = 1
for index in Dppp: 
    numposD.append(str(i)) #this is for the x axis of the graph, has numbers 1, 2, ... (length of string)
    i += 1
i2 = 1
for index in FAppp: #same as above
    numposFA.append(str(i2))
    i2 += 1

if numposD != numposFA: #if the teams don't have the same number of possession add a hold position for the shorter one so the graphs include all actual possession
    if numposD > numposFA:
        FAppp.append(0)
    else:
        Dppp.append(0)

n1 = len(Dppp) #finds number of possessions
n2 = len(FAppp)
width = 0.35

ind1 = np.arange(n1)
#ind2 = np.arange(n2)
fig1, ax1 = plt.subplots() 
#fig2, ax2 = plt.subplots() #probably why second graph doesn't work

graph1 = ax1.bar(ind1-width, Dppp, width, color='b'), ax1.bar(ind1, FAppp, width, color='r') #double bar graph, creates the two bars
#graph2 = ax2.bar(ind2, FAppp, width, color='r')

ax1.set_title('Passes per Possession') #labels axes
ax1.set_ylabel('Number of Passes')
ax1.set_xlabel('Possession Number')
ax1.set_xticks(ind1 + width / 2) #sets width of tick marks
ax1.set_xticklabels(numposFA) #sets labels, as described above
ax1.legend(graph1[0], 'Duke',) 
#Duke, = ax1.bar(Dppp, label='Duke')
#FA, = ax1.bar(FAppp, label='Florida Atlantic')
ax1.legend("Duke", "FA") #sets legend/key
blue_patch = mpatches.Patch(color='blue', label='Duke') #creates color of key
red_patch = mpatches.Patch(color='red', label='Florida Atlantic')
plt.legend(handles=[blue_patch,red_patch]) #prints key in color

#histogram of passes
plt.hist(Dppp, bins=10, range=(0,9), weights=None) #uses histogram function in matplotlib; can change to FAppp
plt.title('Histogram of Passes per Possession') #title
plt.ylabel('Frequency of Pass Number')
plt.xlabel('Number of Passes')


#graph for pass speed, can be refined later
avgpassD = sum(speedR)/len(speedR) #averages pass speed
avgpassFA = sum(speedL)/len(speedL)
width = .35

fig2, ax2 = plt.subplots()
graph2 = ax2.bar(1, avgpassD, width, color='b'), ax2.bar(1.5, avgpassFA, width, color='r') #color of bar
ax2.set_title('Average Speed') #title
ax2.set_ylabel('Speed in mi/hr') #y-axis label
ax2.set_xlabel('Team') #x-axis label
blue_patch = mpatches.Patch(color='blue', label='Duke') #key for Duke
red_patch = mpatches.Patch(color='red', label='Florida Atlantic') #key for Florida Atlantic
plt.legend(handles=[blue_patch,red_patch]) #print key

#histogram of speed
plt.hist(speedR, bins=10, alpha=.5, range=(0,40), weights=None, color='b', edgecolor='k') #speed for Right team
plt.hist(speedL, bins=10, alpha=.5, range=(0,40), weights=None, color='r', edgecolor='k') #speed for Left team
plt.title('Histogram of Speed of Passes') #title
plt.ylabel('Frequency of Speed')
plt.xlabel('Speed (mi/hr)')
blue_patch = mpatches.Patch(color='blue', alpha=.5, label='Duke') #key for Duke
red_patch = mpatches.Patch(color='red', alpha=.5, label='Florida Atlantic') #key for Florida Atlantic
plt.legend(handles=[blue_patch,red_patch])
