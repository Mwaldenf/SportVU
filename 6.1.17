#6.1.17

X = posinfo1
y = outcome
newpos= [2,1,13]

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=7, weights='uniform')
knn.fit(X,y)
response = knn.predict(newpos) 
print(knn.predict(X))

from sklearn import metrics
from sklearn.cross_validation import train_test_split
from sklearn.cross_validation import cross_val_score
from sklearn.grid_search import GridSearchCV 

scores = cross_val_score(knn, X, y, cv=4, scoring='accuracy')
print(scores)
print(scores.mean())

kRange = []
for n in range(1,23):
    kRange.append(n)

pgrid = dict(n_neighbors=kRange)
grid = GridSearchCV(knn, pgrid, cv=4, scoring='accuracy')
grid.fit(X,y)
print(grid.grid_scores_)
'''
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=(25/34))

knn = KNeighborsClassifier(n_neighbors=8)
knn.fit(X_train,y_train)
knn.predict(X_test)
kpred = knn.predict(X_test)
print(metrics.accuracy_score(y_test,kpred))
'''

if response == 1:
    print('Shot made!')
else:
    print('No shot made.')
    
    
#outcome list and stripplot code
outcome = [2,1,1,1,2,2,0,0,2,1,2,1,1,2,1,1,2,2,0,1,1,2,1,1,2,1,2,1,1,0,0,1,0,2,1,0,2,2,2,1,1,1,0,1,2,2,2,0,2,2,1,2,2,2,2,0,1,1,2,2,1] #2=made shot; 1-miss shot 0=no shot

df = pd.DataFrame({ "Speed" : posspeed,  #creates a pandas dataframe for possession passes characteristics 
                    "Distance" : posdist,
                    "Number_Passes" : passnum,
                    "Outcome" : outcome})

#only prints one a at a time
#sns.stripplot(x="Outcome", y="Number_Passes", data=df);
#sns.stripplot(x="Outcome", y="Distance", data=df);
sns.stripplot(x="Outcome", y="Speed", data=df);



#adds the total distance the ball was passed in a possssion to the possession characteristics 
totaldist = []

#pandas for machine learning - setting up data frame
for x in possession:
    posinfo.append([x[0]]) #creates a list for each possession

for a in posinfo:
    spead = [] #intermediate speed variable
    disst = [] #intermediate distance variable
    for x,y,d in zip(posA,speedA,passdistA):
        if a[0] == x: #if the possession the speed/dist is from is the same as the info list...
            spead.append(y) #add to intermediate variable
            disst.append(d)
    if len(spead) > 0: #if the speed/dist exsits...
        a.append(sum(spead)/len(spead)) #append average speed to info
        a.append(sum(disst)/len(disst)) #append average distance to info
        a.append(sum(disst)) #appends total distance to info
    else: #if empty, append 0; makes it so there is no division by zero
        a.append(0) 
        a.append(0)
        a.append(0)
    for v in passperpos: #appends number of passes to posinfo if possession number matches
        if a[0] == v[2]:
            a.append(v[1])

for x in posinfo:
    if x[3] != 0 and x[1] != 0:
        posspeed.append(x[1])
        posdist.append(x[2])
        totaldist.append(x[3])
        passnum.append(x[4])
    elif x[1] == x[2] == x[3] == 0:
        posspeed.append(x[1])
        posdist.append(x[2])
        totaldist.append(x[3])
        passnum.append(x[4])
    else:
        notincluded.append(x[0])

posinfo1 = []
for x in posinfo:
    if x[3] != 0 and x[1] != 0:
        posinfo1.append(x[1:])
    elif x[1] == x[2] == x[3] == 0:
        posinfo1.append(x[1:])
    else:
        notincluded.append(x[0])

df = pd.DataFrame({ "Avg Speed" : posspeed,  #creates a pandas dataframe for possession passes characteristics 
                    "Avg Distance" : posdist,
                    "Total Distance" : totaldist,
                    "# of Passes" : passnum,
                    #"Outcome" : outcome #or shotmade for all half 1 data
                   })
